<?php
 namespace Jenssegers\Agent; use BadMethodCallException; use Jaybizzle\CrawlerDetect\CrawlerDetect; use Mobile_Detect; class Agent extends Mobile_Detect { protected static $additionalDevices = [ 'Macintosh' => 'Macintosh', ]; protected static $additionalOperatingSystems = [ 'Windows' => 'Windows', 'Windows NT' => 'Windows NT', 'OS X' => 'Mac OS X', 'Debian' => 'Debian', 'Ubuntu' => 'Ubuntu', 'Macintosh' => 'PPC', 'OpenBSD' => 'OpenBSD', 'Linux' => 'Linux', 'ChromeOS' => 'CrOS', ]; protected static $additionalBrowsers = [ 'Opera' => 'Opera|OPR', 'Edge' => 'Edge', 'UCBrowser' => 'UCBrowser', 'Vivaldi' => 'Vivaldi', 'Chrome' => 'Chrome', 'Firefox' => 'Firefox', 'Safari' => 'Safari', 'IE' => 'MSIE|IEMobile|MSIEMobile|Trident/[.0-9]+', 'Netscape' => 'Netscape', 'Mozilla' => 'Mozilla', ]; protected static $additionalProperties = [ 'Windows' => 'Windows NT [VER]', 'Windows NT' => 'Windows NT [VER]', 'OS X' => 'OS X [VER]', 'BlackBerryOS' => ['BlackBerry[\w]+/[VER]', 'BlackBerry.*Version/[VER]', 'Version/[VER]'], 'AndroidOS' => 'Android [VER]', 'ChromeOS' => 'CrOS x86_64 [VER]', 'Opera' => [' OPR/[VER]', 'Opera Mini/[VER]', 'Version/[VER]', 'Opera [VER]'], 'Netscape' => 'Netscape/[VER]', 'Mozilla' => 'rv:[VER]', 'IE' => ['IEMobile/[VER];', 'IEMobile [VER]', 'MSIE [VER];', 'rv:[VER]'], 'Edge' => 'Edge/[VER]', 'Vivaldi' => 'Vivaldi/[VER]', ]; protected static $crawlerDetect; public function getDetectionRulesExtended() { static $rules; if (! $rules) { $rules = $this->mergeRules( static::$additionalDevices, static::$phoneDevices, static::$tabletDevices, static::$operatingSystems, static::$additionalOperatingSystems, static::$browsers, static::$additionalBrowsers, static::$utilities ); } return $rules; } public function getRules() { if ($this->detectionType == static::DETECTION_TYPE_EXTENDED) { return static::getDetectionRulesExtended(); } else { return static::getMobileDetectionRules(); } } public function getCrawlerDetect() { if (self::$crawlerDetect === null) { self::$crawlerDetect = new CrawlerDetect(); } return self::$crawlerDetect; } public function languages($acceptLanguage = null) { if (! $acceptLanguage) { $acceptLanguage = $this->getHttpHeader('HTTP_ACCEPT_LANGUAGE'); } if ($acceptLanguage) { $languages = []; foreach (explode(',', $acceptLanguage) as $piece) { $parts = explode(';', $piece); $language = strtolower($parts[0]); $priority = empty($parts[1]) ? 1. : floatval(str_replace('q=', '', $parts[1])); $languages[$language] = $priority; } arsort($languages); return array_keys($languages); } return []; } protected function findDetectionRulesAgainstUA(array $rules, $userAgent = null) { foreach ($rules as $key => $regex) { if (empty($regex)) { continue; } if ($this->match($regex, $userAgent)) { return $key ?: reset($this->matchesArray); } } return false; } public function browser($userAgent = null) { $rules = $this->mergeRules( static::$additionalBrowsers, static::$browsers ); return $this->findDetectionRulesAgainstUA($rules, $userAgent); } public function platform($userAgent = null) { $rules = $this->mergeRules( static::$operatingSystems, static::$additionalOperatingSystems ); return $this->findDetectionRulesAgainstUA($rules, $userAgent); } public function device($userAgent = null) { $rules = $this->mergeRules( static::$additionalDevices, static::$phoneDevices, static::$tabletDevices, static::$utilities ); return $this->findDetectionRulesAgainstUA($rules, $userAgent); } public function isDesktop($userAgent = null, $httpHeaders = null) { return ! $this->isMobile($userAgent, $httpHeaders) && ! $this->isTablet($userAgent, $httpHeaders) && ! $this->isRobot($userAgent); } public function isPhone($userAgent = null, $httpHeaders = null) { return $this->isMobile($userAgent, $httpHeaders) && ! $this->isTablet($userAgent, $httpHeaders); } public function robot($userAgent = null) { if ($this->getCrawlerDetect()->isCrawler($userAgent ?: $this->userAgent)) { return ucfirst($this->getCrawlerDetect()->getMatches()); } return false; } public function isRobot($userAgent = null) { return $this->getCrawlerDetect()->isCrawler($userAgent ?: $this->userAgent); } public function version($propertyName, $type = self::VERSION_TYPE_STRING) { $check = key(static::$additionalProperties); if (! array_key_exists($check, parent::$properties)) { parent::$properties = array_merge( parent::$properties, static::$additionalProperties ); } return parent::version($propertyName, $type); } protected function mergeRules() { $merged = []; foreach (func_get_args() as $rules) { foreach ($rules as $key => $value) { if (empty($merged[$key])) { $merged[$key] = $value; } else { if (is_array($merged[$key])) { $merged[$key][] = $value; } else { $merged[$key] .= '|'.$value; } } } } return $merged; } public function __call($name, $arguments) { if (substr($name, 0, 2) != 'is') { throw new BadMethodCallException("No such method exists: $name"); } $this->setDetectionType(self::DETECTION_TYPE_EXTENDED); $key = substr($name, 2); return $this->matchUAAgainstKey($key); } } 