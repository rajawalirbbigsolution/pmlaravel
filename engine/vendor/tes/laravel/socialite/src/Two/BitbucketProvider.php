<?php
 namespace Laravel\Socialite\Two; use Exception; use Illuminate\Support\Arr; use GuzzleHttp\ClientInterface; class BitbucketProvider extends AbstractProvider implements ProviderInterface { protected $scopes = ['email']; protected $scopeSeparator = ' '; protected function getAuthUrl($state) { return $this->buildAuthUrlFromBase('https://bitbucket.org/site/oauth2/authorize', $state); } protected function getTokenUrl() { return 'https://bitbucket.org/site/oauth2/access_token'; } protected function getUserByToken($token) { $userUrl = 'https://api.bitbucket.org/2.0/user?access_token='.$token; $response = $this->getHttpClient()->get($userUrl); $user = json_decode($response->getBody(), true); if (in_array('email', $this->scopes)) { $user['email'] = $this->getEmailByToken($token); } return $user; } protected function getEmailByToken($token) { $emailsUrl = 'https://api.bitbucket.org/2.0/user/emails?access_token='.$token; try { $response = $this->getHttpClient()->get($emailsUrl); } catch (Exception $e) { return; } $emails = json_decode($response->getBody(), true); foreach ($emails['values'] as $email) { if ($email['type'] == 'email' && $email['is_primary'] && $email['is_confirmed']) { return $email['email']; } } } protected function mapUserToObject(array $user) { return (new User)->setRaw($user)->map([ 'id' => $user['uuid'], 'nickname' => $user['username'], 'name' => Arr::get($user, 'display_name'), 'email' => Arr::get($user, 'email'), 'avatar' => Arr::get($user, 'links.avatar.href'), ]); } public function getAccessToken($code) { $postKey = (version_compare(ClientInterface::VERSION, '6') === 1) ? 'form_params' : 'body'; $response = $this->getHttpClient()->post($this->getTokenUrl(), [ 'auth' => [$this->clientId, $this->clientSecret], 'headers' => ['Accept' => 'application/json'], $postKey => $this->getTokenFields($code), ]); return json_decode($response->getBody(), true)['access_token']; } protected function getTokenFields($code) { return parent::getTokenFields($code) + ['grant_type' => 'authorization_code']; } } 