<?php
 namespace Laravel\Socialite; use ArrayAccess; abstract class AbstractUser implements ArrayAccess, Contracts\User { public $id; public $nickname; public $name; public $email; public $avatar; public $user; public function getId() { return $this->id; } public function getNickname() { return $this->nickname; } public function getName() { return $this->name; } public function getEmail() { return $this->email; } public function getAvatar() { return $this->avatar; } public function getRaw() { return $this->user; } public function setRaw(array $user) { $this->user = $user; return $this; } public function map(array $attributes) { foreach ($attributes as $key => $value) { $this->{$key} = $value; } return $this; } public function offsetExists($offset) { return array_key_exists($offset, $this->user); } public function offsetGet($offset) { return $this->user[$offset]; } public function offsetSet($offset, $value) { $this->user[$offset] = $value; } public function offsetUnset($offset) { unset($this->user[$offset]); } } 