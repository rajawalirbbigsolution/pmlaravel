<?php
 namespace Laravel\Socialite; use Illuminate\Support\Arr; use Illuminate\Support\Str; use InvalidArgumentException; use Illuminate\Support\Manager; use Laravel\Socialite\Two\GithubProvider; use Laravel\Socialite\Two\GoogleProvider; use Laravel\Socialite\One\TwitterProvider; use Laravel\Socialite\Two\FacebookProvider; use Laravel\Socialite\Two\LinkedInProvider; use Laravel\Socialite\Two\BitbucketProvider; use League\OAuth1\Client\Server\Twitter as TwitterServer; class SocialiteManager extends Manager implements Contracts\Factory { public function with($driver) { return $this->driver($driver); } protected function createGithubDriver() { $config = $this->app['config']['services.github']; return $this->buildProvider( GithubProvider::class, $config ); } protected function createFacebookDriver() { $config = $this->app['config']['services.facebook']; return $this->buildProvider( FacebookProvider::class, $config ); } protected function createGoogleDriver() { $config = $this->app['config']['services.google']; return $this->buildProvider( GoogleProvider::class, $config ); } protected function createLinkedinDriver() { $config = $this->app['config']['services.linkedin']; return $this->buildProvider( LinkedInProvider::class, $config ); } protected function createBitbucketDriver() { $config = $this->app['config']['services.bitbucket']; return $this->buildProvider( BitbucketProvider::class, $config ); } public function buildProvider($provider, $config) { return new $provider( $this->app['request'], $config['client_id'], $config['client_secret'], $this->formatRedirectUrl($config), Arr::get($config, 'guzzle', []) ); } protected function createTwitterDriver() { $config = $this->app['config']['services.twitter']; return new TwitterProvider( $this->app['request'], new TwitterServer($this->formatConfig($config)) ); } public function formatConfig(array $config) { return array_merge([ 'identifier' => $config['client_id'], 'secret' => $config['client_secret'], 'callback_uri' => $this->formatRedirectUrl($config), ], $config); } protected function formatRedirectUrl(array $config) { $redirect = value($config['redirect']); return Str::startsWith($redirect, '/') ? $this->app['url']->to($redirect) : $redirect; } public function getDefaultDriver() { throw new InvalidArgumentException('No Socialite driver was specified.'); } } 