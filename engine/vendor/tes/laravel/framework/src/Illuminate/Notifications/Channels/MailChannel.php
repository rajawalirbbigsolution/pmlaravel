<?php
 namespace Illuminate\Notifications\Channels; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Mail\Markdown; use Illuminate\Contracts\Mail\Mailer; use Illuminate\Contracts\Mail\Mailable; use Illuminate\Notifications\Notification; class MailChannel { protected $mailer; protected $markdown; public function __construct(Mailer $mailer, Markdown $markdown) { $this->mailer = $mailer; $this->markdown = $markdown; } public function send($notifiable, Notification $notification) { $message = $notification->toMail($notifiable); if (! $notifiable->routeNotificationFor('mail') && ! $message instanceof Mailable) { return; } if ($message instanceof Mailable) { return $message->send($this->mailer); } $this->mailer->send( $this->buildView($message), $message->data(), $this->messageBuilder($notifiable, $notification, $message) ); } protected function messageBuilder($notifiable, $notification, $message) { return function ($mailMessage) use ($notifiable, $notification, $message) { $this->buildMessage($mailMessage, $notifiable, $notification, $message); }; } protected function buildView($message) { if ($message->view) { return $message->view; } return [ 'html' => $this->markdown->render($message->markdown, $message->data()), 'text' => $this->markdown->renderText($message->markdown, $message->data()), ]; } protected function buildMessage($mailMessage, $notifiable, $notification, $message) { $this->addressMessage($mailMessage, $notifiable, $message); $mailMessage->subject($message->subject ?: Str::title( Str::snake(class_basename($notification), ' ') )); $this->addAttachments($mailMessage, $message); if (! is_null($message->priority)) { $mailMessage->setPriority($message->priority); } } protected function addressMessage($mailMessage, $notifiable, $message) { $this->addSender($mailMessage, $message); $mailMessage->to($this->getRecipients($notifiable, $message)); if ($message->cc) { $mailMessage->cc($message->cc[0], Arr::get($message->cc, 1)); } if ($message->bcc) { $mailMessage->bcc($message->bcc[0], Arr::get($message->bcc, 1)); } } protected function addSender($mailMessage, $message) { if (! empty($message->from)) { $mailMessage->from($message->from[0], Arr::get($message->from, 1)); } if (! empty($message->replyTo)) { $mailMessage->replyTo($message->replyTo[0], Arr::get($message->replyTo, 1)); } } protected function getRecipients($notifiable, $message) { if (is_string($recipients = $notifiable->routeNotificationFor('mail'))) { $recipients = [$recipients]; } return collect($recipients)->map(function ($recipient) { return is_string($recipient) ? $recipient : $recipient->email; })->all(); } protected function addAttachments($mailMessage, $message) { foreach ($message->attachments as $attachment) { $mailMessage->attach($attachment['file'], $attachment['options']); } foreach ($message->rawAttachments as $attachment) { $mailMessage->attachData($attachment['data'], $attachment['name'], $attachment['options']); } } } 