<?php
 namespace Illuminate\Database\Console\Migrations; use Illuminate\Support\Collection; use Illuminate\Database\Migrations\Migrator; use Symfony\Component\Console\Input\InputOption; class StatusCommand extends BaseCommand { protected $name = 'migrate:status'; protected $description = 'Show the status of each migration'; protected $migrator; public function __construct(Migrator $migrator) { parent::__construct(); $this->migrator = $migrator; } public function handle() { $this->migrator->setConnection($this->option('database')); if (! $this->migrator->repositoryExists()) { return $this->error('No migrations found.'); } $ran = $this->migrator->getRepository()->getRan(); if (count($migrations = $this->getStatusFor($ran)) > 0) { $this->table(['Ran?', 'Migration'], $migrations); } else { $this->error('No migrations found'); } } protected function getStatusFor(array $ran) { return Collection::make($this->getAllMigrationFiles()) ->map(function ($migration) use ($ran) { $migrationName = $this->migrator->getMigrationName($migration); return in_array($migrationName, $ran) ? ['<info>Y</info>', $migrationName] : ['<fg=red>N</fg=red>', $migrationName]; }); } protected function getAllMigrationFiles() { return $this->migrator->getMigrationFiles($this->getMigrationPaths()); } protected function getOptions() { return [ ['database', null, InputOption::VALUE_OPTIONAL, 'The database connection to use.'], ['path', null, InputOption::VALUE_OPTIONAL, 'The path of migrations files to use.'], ]; } } 