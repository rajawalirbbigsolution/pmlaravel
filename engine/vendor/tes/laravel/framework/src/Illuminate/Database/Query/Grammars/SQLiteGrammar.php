<?php
 namespace Illuminate\Database\Query\Grammars; use Illuminate\Database\Query\Builder; class SQLiteGrammar extends Grammar { protected $selectComponents = [ 'aggregate', 'columns', 'from', 'joins', 'wheres', 'groups', 'havings', 'orders', 'limit', 'offset', 'lock', ]; protected $operators = [ '=', '<', '>', '<=', '>=', '<>', '!=', 'like', 'not like', 'ilike', '&', '|', '<<', '>>', ]; public function compileSelect(Builder $query) { $sql = parent::compileSelect($query); if ($query->unions) { $sql = 'select * from ('.$sql.') '.$this->compileUnions($query); } return $sql; } protected function compileUnion(array $union) { $conjuction = $union['all'] ? ' union all ' : ' union '; return $conjuction.'select * from ('.$union['query']->toSql().')'; } protected function whereDate(Builder $query, $where) { return $this->dateBasedWhere('%Y-%m-%d', $query, $where); } protected function whereDay(Builder $query, $where) { return $this->dateBasedWhere('%d', $query, $where); } protected function whereMonth(Builder $query, $where) { return $this->dateBasedWhere('%m', $query, $where); } protected function whereYear(Builder $query, $where) { return $this->dateBasedWhere('%Y', $query, $where); } protected function whereTime(Builder $query, $where) { return $this->dateBasedWhere('%H:%M:%S', $query, $where); } protected function dateBasedWhere($type, Builder $query, $where) { $value = str_pad($where['value'], 2, '0', STR_PAD_LEFT); $value = $this->parameter($value); return "strftime('{$type}', {$this->wrap($where['column'])}) {$where['operator']} {$value}"; } public function compileInsert(Builder $query, array $values) { $table = $this->wrapTable($query->from); if (! is_array(reset($values))) { $values = [$values]; } if (count($values) == 1) { return empty(reset($values)) ? "insert into $table default values" : parent::compileInsert($query, reset($values)); } $names = $this->columnize(array_keys(reset($values))); $columns = []; foreach (array_keys(reset($values)) as $column) { $columns[] = '? as '.$this->wrap($column); } $columns = array_fill(0, count($values), implode(', ', $columns)); return "insert into $table ($names) select ".implode(' union all select ', $columns); } public function compileTruncate(Builder $query) { return [ 'delete from sqlite_sequence where name = ?' => [$query->from], 'delete from '.$this->wrapTable($query->from) => [], ]; } } 