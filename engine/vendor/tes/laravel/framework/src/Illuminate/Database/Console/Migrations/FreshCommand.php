<?php
 namespace Illuminate\Database\Console\Migrations; use Illuminate\Console\Command; use Illuminate\Console\ConfirmableTrait; use Symfony\Component\Console\Input\InputOption; class FreshCommand extends Command { use ConfirmableTrait; protected $name = 'migrate:fresh'; protected $description = 'Drop all tables and re-run all migrations'; public function handle() { if (! $this->confirmToProceed()) { return; } $this->dropAllTables( $database = $this->input->getOption('database') ); $this->info('Dropped all tables successfully.'); $this->call('migrate', [ '--database' => $database, '--path' => $this->input->getOption('path'), '--force' => true, ]); if ($this->needsSeeding()) { $this->runSeeder($database); } } protected function dropAllTables($database) { $this->laravel['db']->connection($database) ->getSchemaBuilder() ->dropAllTables(); } protected function needsSeeding() { return $this->option('seed') || $this->option('seeder'); } protected function runSeeder($database) { $this->call('db:seed', [ '--database' => $database, '--class' => $this->option('seeder') ?: 'DatabaseSeeder', '--force' => $this->option('force'), ]); } protected function getOptions() { return [ ['database', null, InputOption::VALUE_OPTIONAL, 'The database connection to use.'], ['force', null, InputOption::VALUE_NONE, 'Force the operation to run when in production.'], ['path', null, InputOption::VALUE_OPTIONAL, 'The path of migrations files to be executed.'], ['seed', null, InputOption::VALUE_NONE, 'Indicates if the seed task should be re-run.'], ['seeder', null, InputOption::VALUE_OPTIONAL, 'The class name of the root seeder.'], ]; } } 