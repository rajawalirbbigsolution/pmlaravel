<?php
 namespace Illuminate\Routing\Console; use Illuminate\Support\Str; use InvalidArgumentException; use Illuminate\Console\GeneratorCommand; use Symfony\Component\Console\Input\InputOption; class ControllerMakeCommand extends GeneratorCommand { protected $name = 'make:controller'; protected $description = 'Create a new controller class'; protected $type = 'Controller'; protected function getStub() { if ($this->option('parent')) { return __DIR__.'/stubs/controller.nested.stub'; } elseif ($this->option('model')) { return __DIR__.'/stubs/controller.model.stub'; } elseif ($this->option('resource')) { return __DIR__.'/stubs/controller.stub'; } return __DIR__.'/stubs/controller.plain.stub'; } protected function getDefaultNamespace($rootNamespace) { return $rootNamespace.'\Http\Controllers'; } protected function buildClass($name) { $controllerNamespace = $this->getNamespace($name); $replace = []; if ($this->option('parent')) { $replace = $this->buildParentReplacements(); } if ($this->option('model')) { $replace = $this->buildModelReplacements($replace); } $replace["use {$controllerNamespace}\Controller;\n"] = ''; return str_replace( array_keys($replace), array_values($replace), parent::buildClass($name) ); } protected function buildParentReplacements() { $parentModelClass = $this->parseModel($this->option('parent')); if (! class_exists($parentModelClass)) { if ($this->confirm("A {$parentModelClass} model does not exist. Do you want to generate it?", true)) { $this->call('make:model', ['name' => $parentModelClass]); } } return [ 'ParentDummyFullModelClass' => $parentModelClass, 'ParentDummyModelClass' => class_basename($parentModelClass), 'ParentDummyModelVariable' => lcfirst(class_basename($parentModelClass)), ]; } protected function buildModelReplacements(array $replace) { $modelClass = $this->parseModel($this->option('model')); if (! class_exists($modelClass)) { if ($this->confirm("A {$modelClass} model does not exist. Do you want to generate it?", true)) { $this->call('make:model', ['name' => $modelClass]); } } return array_merge($replace, [ 'DummyFullModelClass' => $modelClass, 'DummyModelClass' => class_basename($modelClass), 'DummyModelVariable' => lcfirst(class_basename($modelClass)), ]); } protected function parseModel($model) { if (preg_match('([^A-Za-z0-9_/\\\\])', $model)) { throw new InvalidArgumentException('Model name contains invalid characters.'); } $model = trim(str_replace('/', '\\', $model), '\\'); if (! Str::startsWith($model, $rootNamespace = $this->laravel->getNamespace())) { $model = $rootNamespace.$model; } return $model; } protected function getOptions() { return [ ['model', 'm', InputOption::VALUE_OPTIONAL, 'Generate a resource controller for the given model.'], ['resource', 'r', InputOption::VALUE_NONE, 'Generate a resource controller class.'], ['parent', 'p', InputOption::VALUE_OPTIONAL, 'Generate a nested resource controller class.'], ]; } } 