<?php
 namespace Illuminate\Redis; use InvalidArgumentException; use Illuminate\Contracts\Redis\Factory; class RedisManager implements Factory { protected $driver; protected $config; protected $connections; public function __construct($driver, array $config) { $this->driver = $driver; $this->config = $config; } public function connection($name = null) { $name = $name ?: 'default'; if (isset($this->connections[$name])) { return $this->connections[$name]; } return $this->connections[$name] = $this->resolve($name); } public function resolve($name = null) { $name = $name ?: 'default'; $options = $this->config['options'] ?? []; if (isset($this->config[$name])) { return $this->connector()->connect($this->config[$name], $options); } if (isset($this->config['clusters'][$name])) { return $this->resolveCluster($name); } throw new InvalidArgumentException( "Redis connection [{$name}] not configured." ); } protected function resolveCluster($name) { $clusterOptions = $this->config['clusters']['options'] ?? []; return $this->connector()->connectToCluster( $this->config['clusters'][$name], $clusterOptions, $this->config['options'] ?? [] ); } protected function connector() { switch ($this->driver) { case 'predis': return new Connectors\PredisConnector; case 'phpredis': return new Connectors\PhpRedisConnector; } } public function connections() { return $this->connections; } public function __call($method, $parameters) { return $this->connection()->{$method}(...$parameters); } } 