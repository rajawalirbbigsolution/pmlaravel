<?php
 namespace Illuminate\Queue; use DateTimeInterface; use Illuminate\Container\Container; use Illuminate\Support\InteractsWithTime; abstract class Queue { use InteractsWithTime; protected $container; protected $encrypter; protected $connectionName; public function pushOn($queue, $job, $data = '') { return $this->push($job, $data, $queue); } public function laterOn($queue, $delay, $job, $data = '') { return $this->later($delay, $job, $data, $queue); } public function bulk($jobs, $data = '', $queue = null) { foreach ((array) $jobs as $job) { $this->push($job, $data, $queue); } } protected function createPayload($job, $data = '') { $payload = json_encode($this->createPayloadArray($job, $data)); if (JSON_ERROR_NONE !== json_last_error()) { throw new InvalidPayloadException( 'Unable to JSON encode payload. Error code: '.json_last_error() ); } return $payload; } protected function createPayloadArray($job, $data = '') { return is_object($job) ? $this->createObjectPayload($job) : $this->createStringPayload($job, $data); } protected function createObjectPayload($job) { return [ 'displayName' => $this->getDisplayName($job), 'job' => 'Illuminate\Queue\CallQueuedHandler@call', 'maxTries' => $job->tries ?? null, 'timeout' => $job->timeout ?? null, 'timeoutAt' => $this->getJobExpiration($job), 'data' => [ 'commandName' => get_class($job), 'command' => serialize(clone $job), ], ]; } protected function getDisplayName($job) { return method_exists($job, 'displayName') ? $job->displayName() : get_class($job); } public function getJobExpiration($job) { if (! method_exists($job, 'retryUntil') && ! isset($job->timeoutAt)) { return; } $expiration = $job->timeoutAt ?? $job->retryUntil(); return $expiration instanceof DateTimeInterface ? $expiration->getTimestamp() : $expiration; } protected function createStringPayload($job, $data) { return [ 'displayName' => is_string($job) ? explode('@', $job)[0] : null, 'job' => $job, 'maxTries' => null, 'timeout' => null, 'data' => $data, ]; } public function getConnectionName() { return $this->connectionName; } public function setConnectionName($name) { $this->connectionName = $name; return $this; } public function setContainer(Container $container) { $this->container = $container; } } 