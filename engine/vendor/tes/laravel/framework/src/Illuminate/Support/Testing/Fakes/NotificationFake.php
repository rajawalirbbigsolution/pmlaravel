<?php
 namespace Illuminate\Support\Testing\Fakes; use Ramsey\Uuid\Uuid; use Illuminate\Support\Collection; use PHPUnit\Framework\Assert as PHPUnit; use Illuminate\Contracts\Notifications\Factory as NotificationFactory; use Illuminate\Contracts\Notifications\Dispatcher as NotificationDispatcher; class NotificationFake implements NotificationFactory, NotificationDispatcher { protected $notifications = []; public function assertSentTo($notifiable, $notification, $callback = null) { if (is_array($notifiable) || $notifiable instanceof Collection) { foreach ($notifiable as $singleNotifiable) { $this->assertSentTo($singleNotifiable, $notification, $callback); } return; } if (is_numeric($callback)) { return $this->assertSentToTimes($notifiable, $notification, $callback); } PHPUnit::assertTrue( $this->sent($notifiable, $notification, $callback)->count() > 0, "The expected [{$notification}] notification was not sent." ); } public function assertSentToTimes($notifiable, $notification, $times = 1) { PHPUnit::assertTrue( ($count = $this->sent($notifiable, $notification)->count()) === $times, "The expected [{$notification}] notification was sent {$count} times instead of {$times} times." ); } public function assertNotSentTo($notifiable, $notification, $callback = null) { if (is_array($notifiable) || $notifiable instanceof Collection) { foreach ($notifiable as $singleNotifiable) { $this->assertNotSentTo($singleNotifiable, $notification, $callback); } return; } PHPUnit::assertTrue( $this->sent($notifiable, $notification, $callback)->count() === 0, "The unexpected [{$notification}] notification was sent." ); } public function assertNothingSent() { PHPUnit::assertEmpty($this->notifications, 'Notifications were sent unexpectedly.'); } public function sent($notifiable, $notification, $callback = null) { if (! $this->hasSent($notifiable, $notification)) { return collect(); } $callback = $callback ?: function () { return true; }; $notifications = collect($this->notificationsFor($notifiable, $notification)); return $notifications->filter(function ($arguments) use ($callback) { return $callback(...array_values($arguments)); })->pluck('notification'); } public function hasSent($notifiable, $notification) { return ! empty($this->notificationsFor($notifiable, $notification)); } protected function notificationsFor($notifiable, $notification) { if (isset($this->notifications[get_class($notifiable)][$notifiable->getKey()][$notification])) { return $this->notifications[get_class($notifiable)][$notifiable->getKey()][$notification]; } return []; } public function send($notifiables, $notification) { return $this->sendNow($notifiables, $notification); } public function sendNow($notifiables, $notification) { if (! $notifiables instanceof Collection && ! is_array($notifiables)) { $notifiables = [$notifiables]; } foreach ($notifiables as $notifiable) { $notification->id = Uuid::uuid4()->toString(); $this->notifications[get_class($notifiable)][$notifiable->getKey()][get_class($notification)][] = [ 'notification' => $notification, 'channels' => $notification->via($notifiable), 'notifiable' => $notifiable, ]; } } public function channel($name = null) { } } 