<?php
 namespace Illuminate\Console\Scheduling; use Illuminate\Console\Application; use Illuminate\Container\Container; use Illuminate\Support\ProcessUtils; use Illuminate\Contracts\Queue\ShouldQueue; class Schedule { protected $events = []; protected $mutex; public function __construct() { $container = Container::getInstance(); $this->mutex = $container->bound(Mutex::class) ? $container->make(Mutex::class) : $container->make(CacheMutex::class); } public function call($callback, array $parameters = []) { $this->events[] = $event = new CallbackEvent( $this->mutex, $callback, $parameters ); return $event; } public function command($command, array $parameters = []) { if (class_exists($command)) { $command = Container::getInstance()->make($command)->getName(); } return $this->exec( Application::formatCommandString($command), $parameters ); } public function job($job, $queue = null) { return $this->call(function () use ($job, $queue) { $job = is_string($job) ? resolve($job) : $job; if ($job instanceof ShouldQueue) { dispatch($job)->onQueue($queue); } else { dispatch_now($job); } })->name(is_string($job) ? $job : get_class($job)); } public function exec($command, array $parameters = []) { if (count($parameters)) { $command .= ' '.$this->compileParameters($parameters); } $this->events[] = $event = new Event($this->mutex, $command); return $event; } protected function compileParameters(array $parameters) { return collect($parameters)->map(function ($value, $key) { if (is_array($value)) { $value = collect($value)->map(function ($value) { return ProcessUtils::escapeArgument($value); })->implode(' '); } elseif (! is_numeric($value) && ! preg_match('/^(-.$|--.*)/i', $value)) { $value = ProcessUtils::escapeArgument($value); } return is_numeric($key) ? $value : "{$key}={$value}"; })->implode(' '); } public function dueEvents($app) { return collect($this->events)->filter->isDue($app); } public function events() { return $this->events; } } 