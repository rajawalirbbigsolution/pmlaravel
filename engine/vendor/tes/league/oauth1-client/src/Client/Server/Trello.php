<?php
 namespace League\OAuth1\Client\Server; use League\OAuth1\Client\Credentials\TokenCredentials; class Trello extends Server { protected $accessToken; protected $applicationExpiration; protected $applicationKey; protected $applicationName; protected $applicationScope; public function __construct($clientCredentials, SignatureInterface $signature = null) { parent::__construct($clientCredentials, $signature); if (is_array($clientCredentials)) { $this->parseConfiguration($clientCredentials); } } public function setAccessToken($accessToken) { $this->accessToken = $accessToken; return $this; } public function setApplicationExpiration($applicationExpiration) { $this->applicationExpiration = $applicationExpiration; return $this; } public function getApplicationExpiration() { return $this->applicationExpiration ?: '1day'; } public function setApplicationName($applicationName) { $this->applicationName = $applicationName; return $this; } public function getApplicationName() { return $this->applicationName ?: null; } public function setApplicationScope($applicationScope) { $this->applicationScope = $applicationScope; return $this; } public function getApplicationScope() { return $this->applicationScope ?: 'read'; } public function urlTemporaryCredentials() { return 'https://trello.com/1/OAuthGetRequestToken'; } public function urlAuthorization() { return 'https://trello.com/1/OAuthAuthorizeToken?'. $this->buildAuthorizationQueryParameters(); } public function urlTokenCredentials() { return 'https://trello.com/1/OAuthGetAccessToken'; } public function urlUserDetails() { return 'https://trello.com/1/members/me?key='.$this->applicationKey.'&token='.$this->accessToken; } public function userDetails($data, TokenCredentials $tokenCredentials) { $user = new User(); $user->nickname = $data['username']; $user->name = $data['fullName']; $user->imageUrl = null; $user->extra = (array) $data; return $user; } public function userUid($data, TokenCredentials $tokenCredentials) { return $data['id']; } public function userEmail($data, TokenCredentials $tokenCredentials) { return; } public function userScreenName($data, TokenCredentials $tokenCredentials) { return $data['username']; } private function buildAuthorizationQueryParameters() { $params = array( 'response_type' => 'fragment', 'scope' => $this->getApplicationScope(), 'expiration' => $this->getApplicationExpiration(), 'name' => $this->getApplicationName(), ); return http_build_query($params); } private function parseConfiguration(array $configuration = array()) { $configToPropertyMap = array( 'identifier' => 'applicationKey', 'expiration' => 'applicationExpiration', 'name' => 'applicationName', 'scope' => 'applicationScope', ); foreach ($configToPropertyMap as $config => $property) { if (isset($configuration[$config])) { $this->$property = $configuration[$config]; } } } } 