<?php
 namespace Symfony\Component\Routing\Matcher\Dumper; class StaticPrefixCollection { private $prefix; private $items = array(); private $matchStart = 0; public function __construct($prefix = '') { $this->prefix = $prefix; } public function getPrefix() { return $this->prefix; } public function getItems() { return $this->items; } public function addRoute($prefix, $route) { $prefix = '/' === $prefix ? $prefix : rtrim($prefix, '/'); $this->guardAgainstAddingNotAcceptedRoutes($prefix); if ($this->prefix === $prefix) { $this->items[] = array($prefix, $route); $this->matchStart = count($this->items); return; } foreach ($this->items as $i => $item) { if ($i < $this->matchStart) { continue; } if ($item instanceof self && $item->accepts($prefix)) { $item->addRoute($prefix, $route); return; } $group = $this->groupWithItem($item, $prefix, $route); if ($group instanceof self) { $this->items[$i] = $group; return; } } $this->items[] = array($prefix, $route); } private function groupWithItem($item, $prefix, $route) { $itemPrefix = $item instanceof self ? $item->prefix : $item[0]; $commonPrefix = $this->detectCommonPrefix($prefix, $itemPrefix); if (!$commonPrefix) { return; } $child = new self($commonPrefix); if ($item instanceof self) { $child->items = array($item); } else { $child->addRoute($item[0], $item[1]); } $child->addRoute($prefix, $route); return $child; } private function accepts($prefix) { return '' === $this->prefix || 0 === strpos($prefix, $this->prefix); } private function detectCommonPrefix($prefix, $anotherPrefix) { $baseLength = strlen($this->prefix); $commonLength = $baseLength; $end = min(strlen($prefix), strlen($anotherPrefix)); for ($i = $baseLength; $i <= $end; ++$i) { if (substr($prefix, 0, $i) !== substr($anotherPrefix, 0, $i)) { break; } $commonLength = $i; } $commonPrefix = rtrim(substr($prefix, 0, $commonLength), '/'); if (strlen($commonPrefix) > $baseLength) { return $commonPrefix; } return false; } public function optimizeGroups() { $index = -1; while (isset($this->items[++$index])) { $item = $this->items[$index]; if ($item instanceof self) { $item->optimizeGroups(); if ($item->shouldBeInlined()) { array_splice($this->items, $index, 1, $item->items); --$index; } } } } private function shouldBeInlined() { if (count($this->items) >= 3) { return false; } foreach ($this->items as $item) { if ($item instanceof self) { return true; } } foreach ($this->items as $item) { if (is_array($item) && $item[0] === $this->prefix) { return false; } } return true; } private function guardAgainstAddingNotAcceptedRoutes($prefix) { if (!$this->accepts($prefix)) { $message = sprintf('Could not add route with prefix %s to collection with prefix %s', $prefix, $this->prefix); throw new \LogicException($message); } } } 