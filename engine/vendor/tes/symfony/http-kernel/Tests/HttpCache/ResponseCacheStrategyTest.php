<?php
 namespace Symfony\Component\HttpKernel\Tests\HttpCache; use PHPUnit\Framework\TestCase; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\HttpCache\ResponseCacheStrategy; class ResponseCacheStrategyTest extends TestCase { public function testMinimumSharedMaxAgeWins() { $cacheStrategy = new ResponseCacheStrategy(); $response1 = new Response(); $response1->setSharedMaxAge(60); $cacheStrategy->add($response1); $response2 = new Response(); $response2->setSharedMaxAge(3600); $cacheStrategy->add($response2); $response = new Response(); $response->setSharedMaxAge(86400); $cacheStrategy->update($response); $this->assertSame('60', $response->headers->getCacheControlDirective('s-maxage')); } public function testSharedMaxAgeNotSetIfNotSetInAnyEmbeddedRequest() { $cacheStrategy = new ResponseCacheStrategy(); $response1 = new Response(); $response1->setSharedMaxAge(60); $cacheStrategy->add($response1); $response2 = new Response(); $cacheStrategy->add($response2); $response = new Response(); $response->setSharedMaxAge(86400); $cacheStrategy->update($response); $this->assertFalse($response->headers->hasCacheControlDirective('s-maxage')); } public function testSharedMaxAgeNotSetIfNotSetInMasterRequest() { $cacheStrategy = new ResponseCacheStrategy(); $response1 = new Response(); $response1->setSharedMaxAge(60); $cacheStrategy->add($response1); $response2 = new Response(); $response2->setSharedMaxAge(3600); $cacheStrategy->add($response2); $response = new Response(); $cacheStrategy->update($response); $this->assertFalse($response->headers->hasCacheControlDirective('s-maxage')); } public function testMasterResponseNotCacheableWhenEmbeddedResponseRequiresValidation() { $cacheStrategy = new ResponseCacheStrategy(); $embeddedResponse = new Response(); $embeddedResponse->setLastModified(new \DateTime()); $cacheStrategy->add($embeddedResponse); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $cacheStrategy->update($masterResponse); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache')); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate')); $this->assertFalse($masterResponse->isFresh()); } public function testValidationOnMasterResponseIsNotPossibleWhenItContainsEmbeddedResponses() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setLastModified(new \DateTime()); $masterResponse->setEtag('foo'); $embeddedResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $cacheStrategy->add($embeddedResponse); $cacheStrategy->update($masterResponse); $this->assertFalse($masterResponse->isValidateable()); $this->assertFalse($masterResponse->headers->has('Last-Modified')); $this->assertFalse($masterResponse->headers->has('ETag')); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache')); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate')); } public function testMasterResponseWithValidationIsUnchangedWhenThereIsNoEmbeddedResponse() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setLastModified(new \DateTime()); $cacheStrategy->update($masterResponse); $this->assertTrue($masterResponse->isValidateable()); } public function testMasterResponseWithExpirationIsUnchangedWhenThereIsNoEmbeddedResponse() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $cacheStrategy->update($masterResponse); $this->assertTrue($masterResponse->isFresh()); } public function testMasterResponseIsNotCacheableWhenEmbeddedResponseIsNotCacheable() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $embeddedResponse = new Response(); $this->assertFalse($embeddedResponse->isFresh()); $cacheStrategy->add($embeddedResponse); $cacheStrategy->update($masterResponse); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('no-cache')); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('must-revalidate')); $this->assertFalse($masterResponse->isFresh()); } public function testEmbeddingPrivateResponseMakesMainResponsePrivate() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $embeddedResponse = new Response(); $embeddedResponse->setPrivate(); $embeddedResponse->setMaxAge(60); $cacheStrategy->add($embeddedResponse); $cacheStrategy->update($masterResponse); $this->assertTrue($masterResponse->headers->hasCacheControlDirective('private')); } public function testResponseIsExiprableWhenEmbeddedResponseCombinesExpiryAndValidation() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $embeddedResponse = new Response(); $embeddedResponse->setSharedMaxAge(60); $embeddedResponse->setEtag('foo'); $cacheStrategy->add($embeddedResponse); $cacheStrategy->update($masterResponse); $this->assertSame('60', $masterResponse->headers->getCacheControlDirective('s-maxage')); } public function testResponseIsExpirableButNotValidateableWhenMasterResponseCombinesExpirationAndValidation() { $cacheStrategy = new ResponseCacheStrategy(); $masterResponse = new Response(); $masterResponse->setSharedMaxAge(3600); $masterResponse->setEtag('foo'); $masterResponse->setLastModified(new \DateTime()); $embeddedResponse = new Response(); $embeddedResponse->setSharedMaxAge(60); $cacheStrategy->add($embeddedResponse); $cacheStrategy->update($masterResponse); $this->assertSame('60', $masterResponse->headers->getCacheControlDirective('s-maxage')); $this->assertFalse($masterResponse->isValidateable()); } } 