<?php
 use Egulias\EmailValidator\EmailValidator; use Egulias\EmailValidator\Validation\RFCValidation; class Swift_Mime_Headers_IdentificationHeader extends Swift_Mime_Headers_AbstractHeader { private $ids = array(); private $emailValidator; public function __construct($name, EmailValidator $emailValidator) { $this->setFieldName($name); $this->emailValidator = $emailValidator; } public function getFieldType() { return self::TYPE_ID; } public function setFieldBodyModel($model) { $this->setId($model); } public function getFieldBodyModel() { return $this->getIds(); } public function setId($id) { $this->setIds(is_array($id) ? $id : array($id)); } public function getId() { if (count($this->ids) > 0) { return $this->ids[0]; } } public function setIds(array $ids) { $actualIds = array(); foreach ($ids as $id) { $this->assertValidId($id); $actualIds[] = $id; } $this->clearCachedValueIf($this->ids != $actualIds); $this->ids = $actualIds; } public function getIds() { return $this->ids; } public function getFieldBody() { if (!$this->getCachedValue()) { $angleAddrs = array(); foreach ($this->ids as $id) { $angleAddrs[] = '<'.$id.'>'; } $this->setCachedValue(implode(' ', $angleAddrs)); } return $this->getCachedValue(); } private function assertValidId($id) { if (!$this->emailValidator->isValid($id, new RFCValidation())) { throw new Swift_RfcComplianceException('Invalid ID given <'.$id.'>'); } } } 